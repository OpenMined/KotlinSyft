apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlinx-serialization'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'jacoco'
apply from: 'publish.gradle'

jacoco {
    toolVersion = Versions.jacocoVersion
}

check.finalizedBy "jacocoTestReport"

tasks.withType(Test) {
    useJUnitPlatform()
}

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {

    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = [ '**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*' ]
    def debugTree = fileTree(dir: "$project.buildDir/tmp/kotlin-classes/debug", excludes: fileFilter)
    def mainSrc = "$project.projectDir/src/main/java"

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree])
    executionData = fileTree(dir: project.buildDir, includes: [
            'jacoco/testDebugUnitTest.exec', 'outputs/code-coverage/connected/*coverage.ec'
    ])
}

android {
    compileSdkVersion Versions.compileSdk
    buildToolsVersion Versions.buildTools

    defaultConfig {
        minSdkVersion Versions.minSdk
        targetSdkVersion Versions.targetSdk
        versionCode Versions.appVersionCode
        versionName Versions.appVersionName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles 'consumer-rules.pro'
    }

    buildTypes {
        debug {
            testCoverageEnabled = true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    testOptions {
        unitTests.returnDefaultValues = true
        unitTests.all {
            jacoco {
                jacoco.includeNoLocationClasses = true

            }
        }
    }

    lintOptions {
        lintConfig file("lint.xml")
    }

    packagingOptions {
        exclude 'META-INF/LICENSE.md'
        exclude 'META-INF/LICENSE-notice.md'
    }
}

dependencies {
    implementation SyftlibDependencies.kotlinJDK
    implementation CommonDependencies.appCompat
    implementation CommonDependencies.coreKtx
    implementation CommonDependencies.kotlinSerialization
    implementation SyftlibDependencies.webrtc
    implementation CommonDependencies.rxJava
    implementation CommonDependencies.rxAndroid
    implementation SyftlibDependencies.okhttp
    implementation CommonDependencies.kotlinSerializationFactory
    implementation SyftlibDependencies.retrofitAdapter
    implementation SyftlibDependencies.retrofit

    implementation SyftlibDependencies.syftProto
    implementation SyftlibDependencies.protobuf

    implementation SyftlibDependencies.pytorchAndroid
    implementation SyftlibDependencies.torchVisionAndroid

    debugImplementation SyftlibDependencies.mockitoJupiter

    androidTestImplementation CommonDependencies.testExtJunit
    androidTestImplementation CommonDependencies.espresso
    testImplementation SyftlibDependencies.junitJupiter
    testImplementation SyftlibDependencies.mockitoCore
    testImplementation SyftlibDependencies.mockitoKotlin
}
