apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlinx-serialization'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'jacoco'
apply plugin: 'org.jetbrains.dokka'
apply plugin: 'maven-publish'
apply from: 'publish.gradle'

jacoco {
    toolVersion = Versions.jacocoVersion
}

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {
    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
    def debugTree = fileTree(dir: "$project.buildDir/tmp/kotlin-classes/debug", excludes: fileFilter)
    def mainSrc = "$project.projectDir/src/main/java"

    getSourceDirectories().setFrom(mainSrc)
    getClassDirectories().setFrom(files([debugTree]))
    getExecutionData().setFrom(fileTree(dir: project.buildDir, includes: [
            'jacoco/testDebugUnitTest.exec', 'outputs/code-coverage/connected/*coverage.ec'
    ]))
}

check.finalizedBy "jacocoTestReport"
tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}

task sourcesJar(type: Jar) {
    getArchiveClassifier().set('sources')
    getArchiveExtension().set('jar')
    from android.sourceSets.getByName("main").java.srcDirs
    group 'build'
}

task dokkaJavaDoc(type: org.jetbrains.dokka.gradle.DokkaTask) {
    outputFormat = 'javadoc'
    outputDirectory = "$buildDir/javadoc"
    inputs.dir 'src/main/java'
}

task javadocJar(type: Jar, dependsOn: dokkaJavaDoc) {
    getArchiveClassifier().set('javadoc')
    getArchiveExtension().set('jar')
    from "$buildDir/javadoc"
}

publishing {
    publications {
        nebula(MavenPublication) {
            artifact("$buildDir/outputs/aar/syft-release.aar")
            artifact sourcesJar
            artifact javadocJar
        }
    }
}

dokka {
    outputFormat = 'gfm'
    outputDirectory = "$buildDir/docs"
    configuration {
        // Use to include or exclude non public members.
        includeNonPublic = false
    }
    doLast {
        ant.move file: "$outputDirectory",
                todir: "$rootDir"
    }
}

android {
    compileSdkVersion Versions.compileSdk
    buildToolsVersion Versions.buildTools

    defaultConfig {
        minSdkVersion Versions.minSdk
        targetSdkVersion Versions.targetSdk
        versionCode Versions.appVersionCode
        versionName Versions.appVersionName
        javaCompileOptions.annotationProcessorOptions.includeCompileClasspath = true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles 'consumer-rules.pro'
    }

    buildTypes {
        debug {
            testCoverageEnabled true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }

    testOptions {
        unitTests {
            returnDefaultValues = true
            includeAndroidResources = true
        }
    }

    lintOptions {
        lintConfig file("lint.xml")
    }

    packagingOptions {
        exclude 'META-INF/LICENSE.md'
        exclude 'META-INF/LICENSE-notice.md'
    }
}

dependencies {
    implementation SyftlibDependencies.kotlinJDK
    implementation CommonDependencies.appCompat
    implementation CommonDependencies.coreKtx
    implementation CommonDependencies.kotlinSerialization
    implementation SyftlibDependencies.webrtc
    implementation CommonDependencies.rxJava
    implementation CommonDependencies.rxAndroid
    implementation SyftlibDependencies.okhttp
    implementation CommonDependencies.kotlinSerializationFactory
    implementation SyftlibDependencies.retrofitAdapter
    implementation SyftlibDependencies.retrofit

    implementation SyftlibDependencies.syftProto
    implementation SyftlibDependencies.protobuf

    implementation SyftlibDependencies.pytorchAndroid
    implementation SyftlibDependencies.torchVisionAndroid

    androidTestImplementation CommonDependencies.adxExtJunit
    androidTestImplementation CommonDependencies.adxRunner
    androidTestImplementation CommonDependencies.adxExtTruth
    androidTestImplementation CommonDependencies.espresso

    testImplementation CommonDependencies.adxTest
    testImplementation CommonDependencies.robolectric
    testImplementation CommonDependencies.junit
    testImplementation CommonDependencies.mockitoCore
    testImplementation CommonDependencies.mockitoKotlin
    testImplementation CommonDependencies.mockk
}
